knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("janitor")
library(janitor)
#install.packages("censusxy")
#install.packages("leaflet")
library(censusxy)
install.packages("censusxy")
# install.packages("remotes")
remotes::install_github("chris-prener/censusxy")
#install.packages("leaflet")
library(censusxy)
library(tidycensus)
#install.packages("leaflet")
remotes::install_github("walkerke/tidycensus")
library(tidycensus)
library(dplyr)
#rachel's key census_api_key("549950d36c22ff16455fe196bbbd01d63cfbe6cf")
#install.packages("htmlwidgets")
library(htmlwidgets)
library(leaflet)
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(sf)
library(tidyverse)
#install.packages("janitor")
library(janitor)
# install.packages("remotes")
#remotes::install_github("chris-prener/censusxy")
#install.packages("censusxy")
#install.packages("leaflet")
library(censusxy)
#install.packages("leaflet")
#remotes::install_github("walkerke/tidycensus")
library(tidycensus)
library(dplyr)
#rachel's key census_api_key("549950d36c22ff16455fe196bbbd01d63cfbe6cf")
#install.packages("htmlwidgets")
library(htmlwidgets)
library(leaflet)
library(sf)
md <- get_acs(
geography = "county",
state = "Maryland",
variables = c(medinc = "B19013_001",
medage = "B01002_001"),
year = 2020,
output = "wide"
)
#Median household income for each county is represented by medincE, for the estimate, and medincM, for the margin of error.
#https://walker-data.com/census-r/an-introduction-to-tidycensus.html
#Baltimore City Median Income: Baltimore city, Maryland $52,164
View(md)
#remotes::install_github("walkerke/tidycensus")
library(tidyverse)
library(tidycensus)
#a = get_decennial(geography = "state", variables = "P1_001N", year = 2020)
# head(a, 5)
#install.packages("formattable")
library(formattable)
library(htmlwidgets)
library(leaflet)
library(sf)
library(formattable)
library(dplyr)
library(tidyr)
library(janitor)
library(leaflet.extras)
install.packages("leaflet.extras")
library(leaflet.extras)
library(googlesheets4)
census_api_key("9cabe8a191a1f824755d4a1845f13cb08faa2c5f", install = TRUE, overwrite = TRUE)
googlesheets4::gs4_deauth()
smith <- read_sheet("https://docs.google.com/spreadsheets/d/1RheKDdtsToCcSLnZoZBYwtN_ISw6E2kgPIQpDQE_BYw/edit?usp=sharing") %>%
as.data.frame()
smith <- smith %>%
clean_names()
md <- rio::import("/Users/gizmofo/Library/CloudStorage/GoogleDrive-robwells@umd.edu/My Drive/Baltimore Jour 327 Spring 2024/maryland_tracts.xls") %>%
as.data.frame()
md <- rio::import("../data/maryland_tracts.xls") %>%
as.data.frame()
View(md)
md <- md %>%
clean_names() %>%
mutate(census = as.character(tract))
cross <- rio::import("../output/md_internet_tracts_2020.csv") %>%
mutate(census = as.character(GEOID))
View(cross)
md_named <- md %>%
inner_join(cross, by=c("census"))
View(md_named)
md_named1 <- md %>%
right_join(cross, by=c("census"))
md_named1 <- md %>%
left_join(cross, by=c("census"))
View(md_named1)
anti_md_named <- md %>%
anti_join(cross, by=c("census"))
View(anti_md_named)
names(md)
md_named2 <- md %>%
inner_join(cross, by=c("tract"="census"))
md_named2 <- md %>%
inner_join(cross, by=c("tract"=="census"))
glimpse(md)
glimpse(cross)
View(cross)
md_tract <- get_acs(
geography = "tract",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2020,
output = "wide"
)
View(md_tract)
glimpse(md_tract)
md_named2 <- md %>%
inner_join(md_tract, by=c("census"="GEOID"))
md_tract <- get_acs(
geography = "tract",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2022,
output = "wide"
)
md_named2 <- md %>%
inner_join(md_tract, by=c("census"="GEOID"))
md %>%
count(census)
md %>%
count(census) %>%
arrange(desc(n))
md_tract %>%
count(GEOID) %>%
arrange(desc(n))
md_tract <- get_decennial(
geography = "tract",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2022,
output = "wide"
)
md_tract <- get_decennial(
geography = "tract",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2020,
output = "wide"
)
md_tract <- get_decennial(
geography = "tract",
state = "Maryland",
year = 2020,
output = "wide"
)
md_tract <- get_decennial(
geography = "tract",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2020,
output = "wide"
)
decennial20 <- load_variables(2020, "sf1", cache = TRUE)
decennial20 <- load_variables(2020, "sf3", cache = TRUE)
paste0("sf", 1:4) %>%
map(load_variables, year = 2000, cache = TRUE) %>%
bind_rows()
paste0("sf", 1:4) %>%
map(load_variables, year = 2020, cache = TRUE) %>%
bind_rows()
md_tract <- get_acs(
geography = "zip",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2020,
output = "wide"
)
md_tract2 <- get_acs(
geography = "block",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2020,
output = "wide"
)
#library(tidycensus)
md_tract2 <- get_decennial(
geography = "block",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "block",
state = "Maryland",
#variables = c(medinc = "B19013_001"),
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "block",
state = "Maryland",
variables = vars10,
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "tract",
state = "Maryland",
variables = vars10,
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "county",
state = "Maryland",
variables = vars10,
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "tract",
state = "Maryland",
variables = P005003,
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "tract",
state = "Maryland",
variables = "P005003",
year = 2010,
output = "wide"
)
md_tract2 <- get_decennial(
geography = "tract",
state = "Maryland",
variables = "P005003",
year = 2020,
output = "wide"
)
mdplace <- rio::import("/Users/robwells/Downloads/OID_PLACE_20.txt") %>%
as.data.frame()
View(mdplace)
View(md)
qq <- fromJSON('https://geodata.md.gov/imap/rest/services/Boundaries/MD_PoliticalBoundaries/FeatureServer/3/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&distance=&units=esriSRUnit_Foot&relationParam=&outFields=*&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&outSR=&having=&gdbVersion=&historicMoment=&returnDistinctValues=false&returnIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&multipatchOption=xyFootprint&resultOffset=&resultRecordCount=&returnTrueCurves=false&returnExceededLimitFeatures=false&quantizationParameters=&returnCentroid=false&sqlFormat=none&resultType=&featureEncoding=esriDefault&f=pjson')
library(jsonlite)
qq <- fromJSON('https://geodata.md.gov/imap/rest/services/Boundaries/MD_PoliticalBoundaries/FeatureServer/3/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&distance=&units=esriSRUnit_Foot&relationParam=&outFields=*&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&outSR=&having=&gdbVersion=&historicMoment=&returnDistinctValues=false&returnIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&multipatchOption=xyFootprint&resultOffset=&resultRecordCount=&returnTrueCurves=false&returnExceededLimitFeatures=false&quantizationParameters=&returnCentroid=false&sqlFormat=none&resultType=&featureEncoding=esriDefault&f=pjson')
View(qq)
df <- qq[["fields"]][["name"]]
df <- qq[["features"]][["attributes"]]
View(df)
md_zip <- qq[["features"]][["attributes"]]
glimpse(md_zip)
glimpse(anti_md_named)
md_zip <- md_zip %>%
mutate(zip = as.character(ZIPCODE1))
anti_md_zips <- anti_md_named %>%
inner_join(md_zip, by=c("zip"))
glimpse(md_zip)
glimpse(anti_md_named)
md_zip <- md_zip %>%
mutate(zip = as.numeric(ZIPCODE1))
anti_md_zips <- anti_md_named %>%
inner_join(md_zip, by=c("zip"))
View(anti_md_zips)
names(md_named)
names(anti_md_zips)
View(anti_md_named)
View(md)
1388-1267
View(md)
#MD counties
md_counties <- rio::import("/Users/robwells/Downloads/md_counties_geoids.txt")
View(md_counties)
md <- rio::import("../data/maryland_tracts.xls") %>%
as.data.frame()
md <- md %>%
clean_names() %>%
mutate(census = as.character(tract)) %>%
mutate(county = strtrim(tract, 5))
md_named <- md %>%
inner_join(md_counties, by=c("tract"="GEOID"))
glimpse(md)
md_named <- md %>%
inner_join(md_counties, by=c("county"="GEOID"))
md <- rio::import("../data/maryland_tracts.xls") %>%
as.data.frame()
md <- md %>%
clean_names() %>%
mutate(census = as.character(tract)) %>%
mutate(county = as.numeric(strtrim(tract, 5)))
md_named <- md %>%
inner_join(md_counties, by=c("county"="GEOID"))
md_tract <- get_acs(
geography = "tract",
state = "Maryland",
variables = c(medinc = "B19013_001"),
year = 2022,
output = "wide"
)
View(md_tract)
View(cross)
write.csv(md_named, "../output/md_smith_data_12.16.csv")
View(md)
