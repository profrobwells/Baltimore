variable_info <- content(response, "parsed")$variables
# Print the variable names and descriptions
for (var_id in names(variable_info)) {
cat("Variable Name:", var_id, "\n")
cat("Description:", variable_info[[var_id]]$label, "\n")
cat("\n")
}
} else {
cat("Error:", http_status(response)$reason, "\n")
}
# Install and load required packages
#install.packages("httr")
library(httr)
# Make an API request to retrieve variable information
response <- GET("https://api.census.gov/data/2018/zbp/variables.json")
# Check if the request was successful
if (http_status(response)$status_type == "success") {
# Extract variable information from the response
variable_info <- content(response, "parsed")$variables
# Print the variable names and descriptions
for (var_id in names(variable_info)) {
cat("Variable Name:", var_id, "\n")
cat("Description:", variable_info[[var_id]]$label, "\n")
cat("\n")
}
} else {
cat("Error:", http_status(response)$reason, "\n")
}
# Load required packages
library(httr)
# Make an API request to retrieve variable information
response <- GET("https://api.census.gov/data/2018/zbp/variables.json")
# Check if the request was successful
if (http_status(response)$status_type == "success") {
# Extract variable information from the response
variable_info <- content(response, "parsed")
# Check if the 'variables' field exists in the response
if ("variables" %in% names(variable_info)) {
# Print the variable names and descriptions
for (var_id in names(variable_info$variables)) {
cat("Variable Name:", var_id, "\n")
cat("Description:", variable_info$variables[[var_id]]$label, "\n")
cat("\n")
}
} else {
cat("Error: 'variables' field not found in the API response.\n")
}
} else {
cat("Error:", http_status(response)$reason, "\n")
}
# Load required packages
library(httr)
# Make an API request to retrieve variable information
response <- GET("https://api.census.gov/data/2018/zbp/variables.json")
# Check if the response object is not NULL
if (!is.null(response)) {
# Check if the request was successful
if (http_status(response)$status_type == "success") {
# Extract variable information from the response
variable_info <- content(response, "parsed")
# Check if the 'variables' field exists in the response
if ("variables" %in% names(variable_info)) {
# Print the variable names and descriptions
for (var_id in names(variable_info$variables)) {
cat("Variable Name:", var_id, "\n")
cat("Description:", variable_info$variables[[var_id]]$label, "\n")
cat("\n")
}
} else {
cat("Error: 'variables' field not found in the API response.\n")
}
} else {
cat("Error:", http_status(response)$reason, "\n")
}
} else {
cat("Error: No response received from the API.\n")
}
# Load required packages
library(httr)
# Make an API request to retrieve variable information
response <- GET("https://api.census.gov/data/2018/zbp/variables.json")
# Check if the request was successful (status code 200)
if (status_code(response) == 200) {
# Extract variable information from the response
variable_info <- content(response, "parsed")
# Check if the 'variables' field exists in the response
if ("variables" %in% names(variable_info)) {
# Print the variable names and descriptions
for (var_id in names(variable_info$variables)) {
cat("Variable Name:", var_id, "\n")
cat("Description:", variable_info$variables[[var_id]]$label, "\n")
cat("\n")
}
} else {
cat("Error: 'variables' field not found in the API response.\n")
}
} else {
cat("Error: Unable to retrieve variable information. Status code:", status_code(response), "\n")
}
View(response)
response[["all_headers"]][[1]][["headers"]]
# Load required packages
library(httr)
library(jsonlite)
# Make an API request to retrieve variable information
response <- GET("https://api.census.gov/data/2018/zbp/variables.json")
# Check if the request was successful
if (http_status(response)$status_type == "success") {
# Extract variable information from the response
variable_info <- content(response, "parsed")
# Check if the 'variables' field exists in the response
if ("variables" %in% names(variable_info)) {
# Check variable IDs for ESTAB, PAYANN, and EMPSZES
estab_id <- NULL
payann_id <- NULL
empszes_id <- NULL
for (var_id in names(variable_info$variables)) {
if (variable_info$variables[[var_id]]$label == "Number of establishments") {
estab_id <- var_id
}
if (variable_info$variables[[var_id]]$label == "Annual payroll ($1,000)") {
payann_id <- var_id
}
if (variable_info$variables[[var_id]]$label == "Employment size of establishment") {
empszes_id <- var_id
}
# Check if all variable IDs are found
if (!is.null(estab_id) && !is.null(payann_id) && !is.null(empszes_id)) {
# Construct the API request URL to retrieve data for all ZIP codes in Baltimore
api_url <- "https://api.census.gov/data/2018/zbp"
query_params <- list(
get = paste(estab_id, payann_id, empszes_id, collapse = ","),
for = "zipcode:*",
# Load required packages
library(httr)
library(jsonlite)
# Make an API request to retrieve variable information
response <- GET("https://api.census.gov/data/2018/zbp/variables.json")
# Check if the request was successful
if (http_status(response)$status_type == "success") {
# Extract variable information from the response
variable_info <- content(response, "parsed")
# Check if the 'variables' field exists in the response
if ("variables" %in% names(variable_info)) {
# Check variable IDs for ESTAB, PAYANN, and EMPSZES
estab_id <- NULL
payann_id <- NULL
empszes_id <- NULL
for (var_id in names(variable_info$variables)) {
if (variable_info$variables[[var_id]]$label == "Number of establishments") {
estab_id <- var_id
}
if (variable_info$variables[[var_id]]$label == "Annual payroll ($1,000)") {
payann_id <- var_id
}
if (variable_info$variables[[var_id]]$label == "Employment size of establishment") {
empszes_id <- var_id
}
# Check if all variable IDs are found
if (!is.null(estab_id) && !is.null(payann_id) && !is.null(empszes_id)) {
# Construct the API request URL to retrieve data for all ZIP codes in Baltimore
api_url <- "https://api.census.gov/data/2018/zbp"
query_params <- list(
get = paste0(estab_id, ",", payann_id, ",", empszes_id),
for = "zipcode:*",
install.packages("censusapi")
library(censusapi)
cbp <- getCensus(
name = "cbp",
vintage = 2020,
vars = c("EMP", "ESTAB"),
region = "state:*",
NAICS2017 = 23)
Sys.setenv(CENSUS_KEY="9cabe8a191a1f824755d4a1845f13cb08faa2c5f")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
apis <- listCensusApis()
colnames(apis)
View(apis)
cbp <- getCensus(
name = "zbp",
vintage = 2020,
vars = c("EMP", "ESTAB"),
region = "state:*",
NAICS2017 = 23)
cbp <- getCensus(
name = "cbp",
vintage = 2020,
vars = c("EMP", "ESTAB"),
region = "state:*",
NAICS2017 = 23)
View(cbp)
cbp <- getCensus(
name = "cbp",
vintage = 2020,
vars = c("EMP", "ESTAB"),
region = "state:24",
NAICS2017 = 23)
View(cbp)
cbp <- getCensus(
name = "cbp",
vintage = 2020,
vars = c("EMP", "ESTAB"),
region = "state:24",
NAICS2017 = "*")
View(cbp)
cbp_bal <- getCensus(
name = "cbp",
vintage = 2020,
vars = c("EMP", "ESTAB"),
region = "county:510",
regionin = "state:24",
NAICS2017 = "*")
View(cbp_bal)
cbp_bal <- getCensus(
name = "cbp",
vintage = 2020,
vars = c("EMP", "ESTAB", "GEO_ID"),
region = "county:510",
regionin = "state:24",
NAICS2017 = "*")
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES"),
region = "zipcode:90210")
head(zbp_2018)
View(zbp_2018)
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "county:510",
regionin = "state:24")
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "county:510")
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "zipcode:21202")
View(zbp_2018)
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "county:510")
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "zipcode:21202, 21297")
View(zbp_2018)
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = variables,
region = paste("zipcode:", paste(baltimore_zipcodes, collapse = ",")),
regionin = "zip code tabulation area"
)
baltimore_zipcodes <- c("21202", "21297")
variables <- c("EMP", "ESTAB", "EMPSZES", "GEO_ID")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = variables,
region = paste("zipcode:", paste(baltimore_zipcodes, collapse = ",")),
regionin = "zip code tabulation area"
)
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = variables,
region = "county subdivision:Baltimore city,MD",
regionin = "zip code tabulation area",
regionfor = paste("zip code tabulation area:", paste(baltimore_zipcodes, collapse = ",")),
key = "9cabe8a191a1f824755d4a1845f13cb08faa2c5f"
)
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = variables,
region = "zip code tabulation area",
regionin = "zip code tabulation area",
regionfor = paste(baltimore_zipcodes, collapse = ","),
key = "9cabe8a191a1f824755d4a1845f13cb08faa2c5f"
)
zbp_data <- data.frame()
# Loop through each ZIP code and retrieve data
for (zipcode in baltimore_zipcodes) {
# Retrieve data for the current ZIP code
data <- getCensus(
name = "zbp",
vintage = 2018,
vars = variables,
region = "zip code tabulation area",
regionin = "zip code tabulation area",
regionfor = zipcode,
key = "9cabe8a191a1f824755d4a1845f13cb08faa2c5f"
)
# Combine the results into the dataframe
zbp_data <- bind_rows(zbp_data, data)
}
zbp_data <- data.frame()
# Loop through each ZIP code and retrieve data
for (zipcode in baltimore_zipcodes) {
# Retrieve data for the current ZIP code
data <- getCensus(
name = "zbp",
vintage = 2018,
vars = variables,
region = "zip code tabulation area",
regionfor = zipcode,
key = "9cabe8a191a1f824755d4a1845f13cb08faa2c5f"
)
# Combine the results into the dataframe
zbp_data <- bind_rows(zbp_data, data)
}
# Define variables of interest
variables <- c("EMP", "ESTAB", "EMPSZES", "GEO_ID")
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_data <- get_acs(
geography = "zip code tabulation area",
variables = variables,
state = "MD",
county = "Baltimore City",
geometry = TRUE,
output = "wide",
year = 2018
)
library(tidycensus)
variables <- c("EMP", "ESTAB", "EMPSZES", "GEO_ID")
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_data <- get_acs(
geography = "zip code tabulation area",
variables = variables,
state = "MD",
county = "Baltimore City",
geometry = TRUE,
output = "wide",
year = 2018
)
library(tidycensus)
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
# Define variables of interest
variables <- c("ESTAB", "EMP", "PAYANN")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_data <- get_zipcode("zbp", variables = variables, state = "MD", county = "Baltimore City", year = 2018)
# Load required packages
library(censusapi)
# Define variables of interest
variables <- c("ESTAB", "EMP", "PAYANN")
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_data <- get_zipcode("zbp", variables = variables, state = "MD", county = "Baltimore City", year = 2018)
# Load required packages
library(censusapi)
# Define variables of interest
variables <- c("ESTAB", "EMP", "PAYANN")
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
# Retrieve data for the specified ZIP codes in Baltimore City
zbp_data <- get_acs(
geography = "zip code tabulation area",
variables = variables,
state = "MD",
county = "Baltimore City",
geometry = TRUE,
output = "wide",
year = 2018
)
# Load required packages
library(tidycensus)
# Define variables of interest
variables <- c("ESTAB", "EMP", "PAYANN")
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
zbp_data <- get_acs(
geography = "zip code tabulation area",
variables = variables,
state = "MD",
county = "Baltimore City",
geometry = TRUE,
output = "wide",
year = 2018
)
# Load required packages
library(tidycensus)
# Define variables of interest
variables <- c("ESTAB", "EMP", "PAYANN")
# Define the specific ZIP codes in Baltimore City
baltimore_zipcodes <- c("21202", "21297")
zbp_data <- get_acs(
#geography = "zip code tabulation area",
variables = variables,
state = "MD",
county = "Baltimore City",
geometry = TRUE,
output = "wide",
year = 2018
)
zbp_data <- get_acs(
geography = "county", geometry = TRUE, state = "MD",
# geography = "zip code tabulation area",
variables = variables,
state = "MD",
county = "Baltimore City",
geometry = TRUE,
output = "wide",
year = 2018
)
zbp_data <- get_acs(
geography = "county", geometry = TRUE, state = "MD",
# geography = "zip code tabulation area",
variables = variables,
# state = "MD",
# county = "Baltimore City",
# geometry = TRUE,
output = "wide",
year = 2018
)
variables
zdp_vars <- load_variables(2018, "zdp", cache = TRUE)
zdp_vars <- load_variables(2018, "sf1", cache = TRUE)
zdp_vars <- load_variables(2020, "sf1", cache = TRUE)
zdp_vars <- load_variables(2021, "sf1", cache = TRUE)
zdp_vars <- load_variables(2021, "cbp", cache = TRUE)
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "zipcode:21202, 21297")
View(zbp_2018)
# zbp_2018 <- getCensus(
#     name = "zbp",
#     vintage = 2018,
#     vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
#     region = "zipcode:21202")
library(censusapi)
baltimore_zips <- c("21201","21202","21203","21205","21206","21211","21213","21214","21215","21216","21217","21218","21222","21223","21224","21229","21230","21231","21234","21236","21237","21239","21251","21263","21264","21270","21273","21275","21278","21280","21281","21282","21286","21287","21288")
baltimore_zbp <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = paste0("zipcode:", baltimore_zips)
)
# zbp_2018 <- getCensus(
#     name = "zbp",
#     vintage = 2018,
#     vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
#     region = "zipcode:21202")
library(censusapi)
baltimore_zips <- c("21201","21202","21203","21205","21206","21211","21213","21214","21215","21216","21217","21218","21222","21223","21224","21229","21230","21231","21234","21236","21237","21239","21251","21263","21264","21270","21273","21275","21278","21280","21281","21282","21286","21287","21288")
baltimore_zbp <- NULL
for(zip in baltimore_zips){
tmp <- getCensus(
name="zbp",
vintage=2018,
vars=c("EMP","ESTAB","EMPSZES","GEO_ID"),
region=paste0("zipcode:",zip)
)
baltimore_zbp <- rbind(baltimore_zbp, tmp)
}
?listCensusMetadata
View(baltimore_zbp)
library(censusapi)
baltimore_zips <- c("21201","21202","21203","21205","21206","21211","21213","21214","21215","21216","21217","21218","21222","21223","21224","21229","21230","21231","21234","21236","21237","21239","21251","21263","21264","21270","21273","21275","21278","21280","21281","21282","21286","21287","21288")
baltimore_zbp <- NULL
for(zip in baltimore_zips){
tmp <- tryCatch(
getCensus(
name="zbp",
vintage=2018,
vars=c("EMP","ESTAB","EMPSZES","GEO_ID"),
region=paste0("zipcode:",zip)
),
error = function(e) NULL
)
if(!is.null(tmp)){
baltimore_zbp <- rbind(baltimore_zbp, tmp)
}
View(baltimore_zbp)
write.csv(baltimore_zdp, "../DataOutput/baltimore_zdp_jan_27.csv")
write.csv(baltimore_zbp, "../DataOutput/baltimore_zbp_jan_27.csv")
unlink("Zip Code Business Patterns_jan_27-2024_cache", recursive = TRUE)
install.packages("htmltools")
zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES"),
region = "zipcode:90210")
head(zbp_2018)
B_zbp_2018 <- getCensus(
name = "zbp",
vintage = 2018,
vars = c("EMP", "ESTAB", "EMPSZES", "GEO_ID"),
region = "zipcode:21202, 21297")
