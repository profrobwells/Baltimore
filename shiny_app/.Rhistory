###
# police officer keywords
# relevant me_death_flag: "Law enforcement"
le_by_actor <- c("law enforcement", "police", "officer")
# actions taken by police officers
# relevant me_death_flag: N/A
le_by_action <- c("custody", "resist arrest", "resisting arrest", "subdue", "subdual", "during arrest")
# relevant me_death_flag: N/A
# removing device for now
le_by_taser <- c("conducted energy", "electro", "electronic", "electric", "tase", " ced ", " stun ")
# sm question: added spray
# relevant me_death_flag: N/A
# note that we're leaving handcuff in for now, but may move to restraint
le_by_weapon <- c("tear gas", "capsicum", "handcuff", "pepper", "bean bag", "canine", "spray")
# relevant me_death_flag: N/A
# note that we need to confirm ketamine referenced is not abuse
le_by_sedative <- c("ketamine","sedative", "droperidol","haloperidol","midazolam","chemical restraint")
# relevant me_death_flag: "Restraints","Prone position" and "Positional Asphyxia"
# sm question: are we sure about asphyxia here
le_by_restraint <- c("restrain", "prone", "back compression", "neck compression", "hobbl", "chock", "choke","chok", "sleeper", "kneeling", "carotid", "hold", "belly", "asphyxia")
# relevant me_death_flag: N/A
## removing subdual here; I think within AP discussion, we should try to keep clean categories for clarity in thinking and to know that each indicator signifies something independent for now
le_by_altercation <- c("struggle", "altercation", "confrontation")
le_by_homicide <- c("homicide")
# sm_question: should we add in asphyxia
## md answer: I'm going to add to restraint for now, unless you know of a way positional asphyxia can happen without prone position / restraint? And then we can discuss
## sm response: web searches suggests it can happen in other positions. And also there was some discussion of just mentioning asphyxia not really being a marker of law enforcement inclusion.
## if it comes out here, needs to come out in code block below too.
# relevant me_death_flag: "Positional asphyxia"
# asphyxia <- "asphyxia"
###
# Create a dataframe of keywords
###
# list of columns
le_indicator_cols <- c("le_by_actor","le_by_action","le_by_taser","le_by_weapon","le_by_sedative","le_by_restraint","le_by_altercation","le_by_homicide")
# define function to make table
make_keywords_table <- function(le_indicator_col) {
# fetch object with keyword array
keywords <- get(le_indicator_col) |>
paste(collapse=", ")
# create one row table
temp_df <- tibble(
indicator = le_indicator_col,
keywords = keywords
)
}
keywords_table <- map_dfr(le_indicator_cols, make_keywords_table)
###
# Create dataframe with me_cause_death and other indicator flags
###
# sm question: because we're not removing NAs from this dataframe, should we be calling NA "n"? That's what this code does
# md answer: saying yes for now, but should be a point of discussion
le_indicator_flags <- base_df |>
mutate(le_by_actor = case_when(
str_detect(tolower(me_cause_death), paste(le_by_actor, collapse = "|")) |
(str_detect(tolower(me_death_flags), "law enforcement")) ~ "y",
TRUE ~ "n")) |>
mutate(le_by_action = case_when(
str_detect(tolower(me_cause_death), paste(le_by_action, collapse = "|")) ~ "y",
TRUE ~ "n")) |>
mutate(le_by_taser = case_when(
str_detect(tolower(me_cause_death), paste(le_by_taser, collapse = "|")) ~ "y",
TRUE ~ "n")) |>
mutate(le_by_weapon = case_when(
str_detect(tolower(me_cause_death), paste(le_by_weapon, collapse = "|")) ~ "y",
TRUE ~ "n")) |>
mutate(le_by_sedative = case_when(
str_detect(tolower(me_cause_death), paste(le_by_sedative, collapse = "|")) ~ "y",
TRUE ~ "n")) |>
mutate(le_by_restraint = case_when(
str_detect(tolower(me_cause_death), paste(le_by_restraint, collapse = "|")) |
str_detect(tolower(me_death_flags), "restraints") |
str_detect(tolower(me_death_flags), "prone") |
str_detect(tolower(me_death_flags), "asphyxia") ~ "y",
TRUE ~ "n")) |>
mutate(le_by_altercation = case_when(
str_detect(tolower(me_cause_death), paste(le_by_altercation, collapse = "|")) ~ "y",
TRUE ~ "n")) |>
mutate(le_by_homicide = case_when(
str_detect(tolower(me_manner_death), "homicide") ~ "y",
TRUE ~ "n"))
###
# Create dataframe where any le flags are all yes
###
le_indicated_any <- le_indicator_flags |>
filter(if_any(le_indicator_cols, ~str_detect(.,"y")))
###
# Create dataframe where all le flags are no
###
no_le_indicated <- le_indicator_flags |>
filter(if_all(le_indicator_cols, ~str_detect(.,"n")))
###
# ngram generation for analysis
###
###
# Single words
###
# Ordered by frequency
no_le_words <- no_le_indicated %>%
select(d_state_of_death:d_first_name,me_cause_death) %>%
filter(!is.na(me_cause_death)) %>%
unnest_tokens(ngram_01,me_cause_death,token="ngrams",n=1) %>%
anti_join(stop_words, by=c("ngram_01" = "word")) %>%
group_by(ngram_01) %>%
count() %>%
arrange(desc(n)) %>%
filter(!str_detect(ngram_01,"^[0-9]")) %>%
rename(count=n) %>%
mutate(interesting_flag = as.character(NA))
###
# make a dataframe for ngrams
###
# create a list of stop words to remove
list_stop_words <- stop_words %>%
select(word) %>%
mutate(word = str_remove_all(word,"'")) %>%
distinct() %>%
mutate(word = paste0(" ",word," ")) %>%
as_vector()
# remove stopwords
no_le_cause_death_no_stopwords <- no_le_indicated %>%
select(d_state_of_death:d_first_name,me_cause_death) %>%
filter(!is.na(me_cause_death)) %>%
mutate(me_cause_death_raw = me_cause_death) %>%
mutate(me_cause_death = tolower(me_cause_death)) %>%
mutate(me_cause_death = str_remove_all(me_cause_death,"[[:punct:]]"))
for (stopword in list_stop_words) {
no_le_cause_death_no_stopwords <- no_le_cause_death_no_stopwords %>%
mutate(me_cause_death = str_replace_all(me_cause_death,stopword," "))
}
# select needed columns
no_le_cause_death_no_stopwords <- no_le_cause_death_no_stopwords |>
select(me_cause_death = me_cause_death_raw,me_cause_death_no_stopwords = me_cause_death)
# write sheet
#sheet_write(no_le_cause_death_no_stopwords,me_cause_death_sheet,"no_le_cause_death_stopword_crosswalk")
###
# bigrams
###
no_le_bigrams <- no_le_cause_death_no_stopwords %>%
unnest_tokens(ngram_02,me_cause_death_no_stopwords,token="ngrams",n=2) %>%
group_by(ngram_02) %>%
count() %>%
arrange(desc(n)) %>%
filter(!str_detect(ngram_02,"^[0-9]")) %>%
rename(count=n,
bigram = ngram_02) %>%
mutate(interesting_flag = as.character(NA))
###
# trigrams
###
no_le_trigrams <- no_le_cause_death_no_stopwords %>%
unnest_tokens(ngram_03,me_cause_death_no_stopwords,token="ngrams",n=3) %>%
group_by(ngram_03) %>%
count() %>%
arrange(desc(n)) %>%
filter(!str_detect(ngram_03,"^[0-9]")) %>%
rename(count=n,
trigram=ngram_03) %>%
mutate(interesting_flag = as.character(NA))
###
# Summary table of mention le and no mention le
###
# define function to make table
make_summary_table <- function(le_indicator_col) {
# fetch object with keyword array
keywords <- get(le_indicator_col) |>
paste(collapse=", ")
# create one row table
temp_df <- tibble(
indicator = le_indicator_col,
keywords = keywords
)
#
count_table <- le_indicator_flags |>
select(indicator_col = {{le_indicator_col}}) |>
group_by(indicator_col) |>
count() |>
pivot_wider(names_from=indicator_col,values_from=n) |>
bind_cols(temp_df) |>
mutate(total_deaths = y+n) |>
select(indicator,keywords,yes=y,no=n,total_deaths)
}
summary_table <- map_dfr(le_indicator_cols,make_summary_table)
# Devon | Shreya | Mario
#table where taser matches in i_uof_type and le_by_taser
taser_matches <- le_indicator_flags %>%
filter(str_detect(tolower(i_uof_type), "taser") & le_by_taser == "y")
#table where taser is in i_uof_type but not in le_by_taser
taser_no_matches <- le_indicator_flags %>%
filter(str_detect(tolower(i_uof_type), "taser") & le_by_taser == "n")
#summary table
taser_summary <- le_indicator_flags %>%
mutate(
taser_matches = case_when(
str_detect(tolower(i_uof_type), "taser") & le_by_taser == "y" ~ "y",
str_detect(tolower(i_uof_type), "taser") & le_by_taser == "n" ~ "n"
)
) %>%
drop_na(taser_matches) %>%
group_by(taser_matches) %>%
summarise(
count = n()
) %>%
mutate(
total_taser_cases_in_i_uof = taser_summary$count[1] + taser_summary$count[2],
percent = round((count/total_taser_cases_in_i_uof)*100, 2)
)
taser_no_matches <- le_indicator_flags %>%
filter(str_detect(tolower(i_uof_type), "taser") & le_by_taser == "n")
#summary table
taser_summary <- le_indicator_flags %>%
mutate(
taser_matches = case_when(
str_detect(tolower(i_uof_type), "taser") & le_by_taser == "y" ~ "y",
str_detect(tolower(i_uof_type), "taser") & le_by_taser == "n" ~ "n"
)
) %>%
drop_na(taser_matches) %>%
group_by(taser_matches) %>%
summarise(
count = n()
) %>%
mutate(
total_taser_cases_in_i_uof =nrow(taser_matches) + nrow(taser_no_matches),
percent = round((count/total_taser_cases_in_i_uof)*100, 2)
)
# Devon | Shreya | Mario
#table where taser matches in i_uof_type and le_by_taser
taser_matches <- le_indicator_flags %>%
filter(str_detect(tolower(i_uof_type), "taser") & le_by_taser == "y")
#table where taser is in i_uof_type but not in le_by_taser
taser_no_matches <- le_indicator_flags %>%
filter(str_detect(tolower(i_uof_type), "taser") & le_by_taser == "n")
#summary table
taser_summary <- le_indicator_flags %>%
mutate(
taser_matches = case_when(
str_detect(tolower(i_uof_type), "taser") & le_by_taser == "y" ~ "y",
str_detect(tolower(i_uof_type), "taser") & le_by_taser == "n" ~ "n"
)
) %>%
drop_na(taser_matches) %>%
group_by(taser_matches) %>%
summarise(
count = n()
) %>%
mutate(
total_taser_cases_in_i_uof = sum(count),
percent = round((count/total_taser_cases_in_i_uof)*100, 2)
)
View(taser_summary)
shiny::runApp('Documents/baltimore_project/shiny_app')
runApp('Documents/baltimore_project/shiny_app')
setwd("~/Documents/baltimore_project/shiny_app")
runApp()
runApp()
install.packages('shinyjs')
library(shinyjs)
shiny::runApp()
library(tidyverse)
#install.packages("dplyr")
library(janitor)
library(lubridate)
library(censusxy)
library(dplyr)
library(parallel)
library(tictoc)
library(furrr)
library(leaflet)
library(leaflet.extras)
library(sf)
#install.packages("sp")
library(sp)
#install.packages("readxl")
library(readxl)
library(data.table)
library(jsonlite)
library(geojsonsf)
#install.packages("geosphere")
library(geosphere)
library(geojsonio)
#install.packages(c("rgdal", "tidycensus"))
library(tidycensus)
#install.packages("fuzzyjoin")
library(fuzzyjoin)
#install.packages("stringdist")
library(stringdist)
#install.packages("rmapzen")
library(rmapzen)
#install.packages("writexl")
library(writexl)
library(rgdal)
#install.packages("spatialEco")
library(spatialEco)
#install.packages("raster")
library(raster)
library(dplyr)
#install.packages("rgeos")
library(rgeos)
library(googlesheets4)
## Loading in re-geocoded Dallas LIHTCs, take out NAs
geocoded_dallas_lihtcs <- read_sheet("https://docs.google.com/spreadsheets/d/1Ni-GImQXU5ozgOqURc1ZHg4jBrJhqPWDSDaQejKI_5Y", sheet = "lihtcs") %>%
filter(!is.na(new_longitude),
!is.na(new_latitude))
### adding placed in service dates, where possible
pis_dates <- read_excel("../data/tdhca/for_analysis_pis_foia_tdhca.xlsx")
dallas_pis_dates <- pis_dates %>%
clean_names() %>%
filter(city == "Dallas") %>%
dplyr::select(htc_file_number, development_name, pis_date)
dallas_lihtcs_with_pis <- geocoded_dallas_lihtcs %>%
left_join(dallas_pis_dates, by = c("tdhca_number" = "htc_file_number")) %>%
#mutate(
#pis_date = as_date(pis_date),
#board_approval = as_date(board_approval)
#) %>%
dplyr::select(-development_name.y) %>%
rename(
development_name = development_name.x,
)
## projections
wgs<- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
utm <- "+proj=utm +zone=51 ellps=WGS84"
## Make spatial
spatial_dallas_lihtcs <- st_as_sf(x = dallas_lihtcs_with_pis,
coords = c("new_longitude", "new_latitude"),
crs = utm)
### abridged GVA participants sheet
all_gva_participants <- read_csv("../data/crime/gva_data/gva_texas_participants.csv") %>%
clean_names() %>%
dplyr::select(incident_id, participant_name, type, gender, age, age_group, status)
## Re - geocoded children shootings from GVA
##NOTE: switch out for corrected_lat and lon columns later
children_shootings <- read_sheet("https://docs.google.com/spreadsheets/d/1Z7ZGeq7weVmiQKjeMtsxx8DyzFuyUv-P24TPIA2r470/", sheet="incidents") %>%
filter(!is.na(new_longitude),
!is.na(new_latitude))
all_shootings <- read_sheet("https://docs.google.com/spreadsheets/d/11gKkMvJmPSB6bvC-Xm6FS4CeXi02Cf4o3w5ZLfGjk-4/", sheet="Sheet1") %>%
filter(!is.na(new_longitude),
!is.na(new_latitude)) %>%
left_join(all_gva_participants, by=c("incident_id"))
## Make these spatial too!
spatial_child_shootings <- st_as_sf(x = children_shootings,
coords = c("new_longitude", "new_latitude"),
crs = utm)
spatial_shootings <- st_as_sf(x = all_shootings,
coords = c("new_longitude", "new_latitude"),
crs = utm)
## buffer!
buffered_dallas_lihtcs <- st_buffer(spatial_dallas_lihtcs, dist=0.005, byid=TRUE) %>%
tibble::rowid_to_column() %>%
dplyr::select(rowid, development_name, geometry) %>%
rename(
buffer_geometry = geometry
)
## joining the buffer df to the points df. this way we have two geometry columns, only one of which is active rn. have to make these points not spatial
nonspatial_lihtcs <- as.data.frame(spatial_dallas_lihtcs) %>%
tibble::rowid_to_column()
## joining
lihtcs_buffers_and_points <- buffered_dallas_lihtcs %>%
left_join(nonspatial_lihtcs, by=c("rowid")) %>%
dplyr::select(-development_name.y) %>%
rename(
development_name = development_name.x,
lihtc_coordinates = geometry
)
### shreya stopped here 11/7 @2:30
## test buffer
buffy <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = lihtcs_buffers_and_points,
color = "#8B4000",
label = paste(lihtcs_buffers_and_points$development_name),
options = providerTileOptions(minZoom = 8, maxZoom = 10)
)
#join children incidents to buffers
## this table outputs a row for every shooting near a lihtc -- that's why some properties are duplicated
### we will pivot this later for analysis
child_shootings_lihtcs <- lihtcs_buffers_and_points %>%
st_join(spatial_child_shootings) %>%
dplyr::select(rowid, development_name, project_address, tdhca_number, current_taag_y_n, current_vcrp, board_approval, pis_date, program_type, population_served, incident_id, date, business_or_school, number_killed, number_injured, address, incident_characteristics, sources, participant_name, type, gender, age_group, status)
## buffy
buffered_dallas_lihtcs <- st_buffer(spatial_dallas_lihtcs, dist=0.005, byid=TRUE) %>%
tibble::rowid_to_column() %>%
dplyr::select(rowid, development_name, geometry)
## buffer created -- now convert back to sf object
lihtcs_with_buffer <- st_as_sf(x = buffered_dallas_lihtcs,
coords = c("new_longitude", "new_latitude"),
crs = wgs)
## joining
lihtcs_buffers_and_points <- buffered_dallas_lihtcs %>%
left_join(nonspatial_lihtcs, by=c("rowid")) %>%
dplyr::select(-development_name.y) %>%
rename(
development_name = development_name.x,
buffer_coordinates = geometry.y,
buffer_coords = geometry.x
)
## test buffer so make sure distances make sense
buffy <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = lihtcs_buffers_and_points,
color = "#8B4000",
label = paste(lihtcs_buffers_and_points$development_name),
options = providerTileOptions(minZoom = 8, maxZoom = 10)
)
#join children incidents to buffers
## this table outputs a row for every shooting near a lihtc -- that's why some properties are duplicated
all_shootings_lihtcs <- lihtcs_buffers_and_points %>%
st_join(spatial_shootings) %>%
dplyr::select(rowid, development_name, project_address, tdhca_number,current_taag_y_n, current_vcrp, board_approval, pis_date, program_type, population_served, incident_id, date, business_or_school, number_killed, number_injured, address, incident_characteristics, sources, participant_name, type, gender, age_group, status)
### remove geometry for pivot
nonspatial_shootings_children <- child_shootings_lihtcs %>%
st_drop_geometry()
### DF by incident number, so we can look up specific events in a year
grouped_children_with_lihtcs <- nonspatial_shootings_children %>%
rename(
incident_date = date
) %>%
mutate(
incident_year = str_extract(incident_date, "^.{4}")
) %>%
group_by(development_name, project_address, board_approval, pis_date, incident_id, tdhca_number, program_type, population_served, incident_year, incident_characteristics, address, number_killed, business_or_school, current_taag_y_n, current_vcrp) %>%
summarize(
number_of_shootings = n(),
.groups = NULL
)
### DF over time
children_by_year <- grouped_children_with_lihtcs %>%
ungroup() %>%
group_by(development_name, project_address, tdhca_number, board_approval, pis_date, program_type,population_served, incident_year, current_taag_y_n, current_vcrp) %>%
summarize(
number_of_shootings = n(),
.groups = NULL
) %>%
pivot_wider(names_from=incident_year, values_from=number_of_shootings, values_fill = 0) %>%
#dplyr::select(-"20NA") %>%
dplyr::select(development_name, project_address, tdhca_number,  board_approval, pis_date, program_type,population_served, current_taag_y_n, current_vcrp, "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022") %>%
mutate(
total_shootings = (`2014`+`2015`+`2016`+`2017`+`2018`+`2019`+`2020`+`2021`+`2022`)
)
# sheet_write(children_by_year, "https://docs.google.com/spreadsheets/d/1mm9Fvww6ntgn5prSS4mGmg0SrpcmCJmq1l0JCNc0I-o/", sheet = "children_shootings")
### remove geometry for pivot
nonspatial_shootings<- all_shootings_lihtcs %>%
st_drop_geometry()
### DF by incident number, so we can look up specific events in a year
grouped_shootings_with_lihtcs <- nonspatial_shootings %>%
rename(
incident_date = date
) %>%
mutate(
incident_year = str_extract(incident_date, "^.{4}")
) %>%
group_by(development_name, project_address,incident_id, tdhca_number,board_approval, pis_date, program_type, population_served, incident_year, incident_characteristics, address, number_killed, business_or_school, current_taag_y_n, current_vcrp) %>%
summarize(
number_of_shootings = n(),
.groups = NULL
)
### DF over time
shootings_by_year <- grouped_shootings_with_lihtcs %>%
ungroup() %>%
group_by(development_name, project_address, tdhca_number, board_approval, pis_date, program_type,population_served, incident_year, current_taag_y_n, current_vcrp) %>%
summarize(
number_of_shootings = n(),
.groups = NULL
) %>%
pivot_wider(names_from=incident_year, values_from=number_of_shootings, values_fill = 0) %>%
#dplyr::select(-"20NA") %>%
dplyr::select(development_name, project_address, tdhca_number, board_approval, pis_date, program_type,population_served, current_taag_y_n, current_vcrp, "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022") %>%
mutate(
total_shootings = (`2014`+`2015`+`2016`+`2017`+`2018`+`2019`+`2020`+`2021`+`2022`)
)
# sheet_write(shootings_by_year, "https://docs.google.com/spreadsheets/d/1PmW5Lk_WOUP0bAR1DUqH1WuWnFP-eWj4O66geD8YCYE/", sheet = "all_shootings")
shootings_w_crime_indicators <- all_shootings_lihtcs %>%
filter(type == "victim") %>%
mutate(
event = "Shooting",
business_or_school = development_name,
date = as.character(date),
current_taag_y_n = NA,
current_vcrp = NA
) %>%
dplyr::select(incident_id, date, event, sources,  business_or_school, address, participant_name, gender, age_group, status,  incident_characteristics, current_taag_y_n, current_vcrp) %>%
st_drop_geometry()
lihtcs_w_crime_indicators <- geocoded_dallas_lihtcs %>%
mutate(
event = "LIHTC approval",
sources = NA,
participant_name = NA,
gender = NA,
age_group = NA,
status = NA,
incident_characteristics = NA,
) %>%
dplyr::select(
incident_id = tdhca_number,
date = board_approval,
event,
sources,
business_or_school = development_name,
address = project_address,
participant_name,
gender,
age_group,
status,
incident_characteristics,
current_taag_y_n,
current_vcrp
)
overall_timeline_gva_lihtcs <- rbind(lihtcs_w_crime_indicators, shootings_w_crime_indicators)
View(overall_timeline_gva_lihtcs)
overall_timeline_gva_lihtcs <- rbind(lihtcs_w_crime_indicators, shootings_w_crime_indicators) %>%
distinct(incident_id)
